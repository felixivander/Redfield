import numpy as np
import csv
import math
import matplotlib.pyplot as plt
from numpy.linalg import eig
from scipy.linalg import expm
##Setup system
tarr = np.linspace(0.001,1000,num=500)
T=4
ga=0.005
def J(x): #Spectral density
    return ga*x #Ohmic bath
def nb(o): #Bose occupation distribution
    return 1/(math.exp(o*T)-1)
def k(o): #Calculating real part of bath correlation function laplace transform
    if abs(o)<10**-3:
        return ga*T
    elif o<0:
        return J(abs(o))*nb(abs(o))
    else:
        return J(abs(o))*(nb(abs(o))+1)
    
Hs=np.array([[0,0.5],[0.5,1]]) #System hamiltonian
n=len(Hs)

rhos=np.array([[1,0],[0,0]])
rhot=np.zeros((2,2,len(tarr)),dtype = 'complex_')
rhoDt=np.zeros((2,2,len(tarr)),dtype = 'complex_')
R=np.zeros((n,n,n,n),dtype = 'complex_')
DHs,V=eig(Hs)

SL=np.array([[0,1],[1,0]]) #System coupling matrix
S=np.matmul(np.matmul(np.linalg.inv(V),SL),V)
rhosD=np.matmul(np.matmul(np.linalg.inv(V),rhos),V)
##Construct Liouvillian tensor
nn=np.linspace(0,n-1,n,dtype=np.int8)
for a in nn:
    for b in nn:
        R[a][b][a][b]=R[a][b][a][b]+1j*(DHs[a]-DHs[b])
        for c in nn:
            for d in nn:
                R[a,b,d,b]=R[a,b,d,b]-S[a,c]*S[c,d]*k(DHs[d]-DHs[c])/2
                R[a,b,a,c]=R[a,b,a,c]-S[b,d]*S[d,c]*k(DHs[c]-DHs[d])/2
                R[a,b,c,d]=R[a,b,c,d]+(S[d,b]*S[a,c]*k(DHs[c]-DHs[a])/2+S[c,a]*S[b,d]*k(DHs[d]-DHs[b])/2)
    
##Dynamics
L=np.reshape(R,(n**2,n**2))

rhosv=np.reshape(rhosD,n**2)
for tin in enumerate(tarr):
    print(tin[0])
    Lexp=expm(L*tin[1])
    rhoDt[0:,0:,tin[0]]=np.reshape(np.matmul(Lexp,rhosv),(n,n))
    rhot[0:,0:,tin[0]]=np.matmul(np.matmul(V,rhoDt[0:,0:,tin[0]]),np.linalg.inv(V))
#plt.semilogx(np.linspace(0,len(tarr)-1,len(tarr),dtype=np.int8),tarr)
plt.plot(tarr, rhot[0,0,0:])
plt.plot(tarr, rhot[1,1,0:])
plt.plot(tarr, rhoDt[0,0,0:])
plt.plot(tarr, rhoDt[1,1,0:])
plt.show()
